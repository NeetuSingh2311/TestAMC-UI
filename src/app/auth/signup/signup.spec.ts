// Code Generated by Sidekick is for learning and experimentation purposes only.
import { ComponentFixture, TestBed, fakeAsync, tick } from '@angular/core/testing';
import { Signup } from './signup';
import { ReactiveFormsModule, FormBuilder } from '@angular/forms';
import { Auth } from '../../services/auth';
import { Router } from '@angular/router';
import { of } from 'rxjs';

describe('Signup Component', () => {
  let component: Signup;
  let fixture: ComponentFixture<Signup>;
  let authSpy: jasmine.SpyObj<Auth>;
  let routerSpy: jasmine.SpyObj<Router>;

  beforeEach(async () => {
    authSpy = jasmine.createSpyObj('Auth', ['signup']);
    routerSpy = jasmine.createSpyObj('Router', ['navigate']);

    await TestBed.configureTestingModule({
      declarations: [Signup],
      imports: [ReactiveFormsModule],
      providers: [
        FormBuilder,
        { provide: Auth, useValue: authSpy },
        { provide: Router, useValue: routerSpy }
      ]
    }).compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(Signup);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create the component', () => {
    expect(component).toBeTruthy();
  });

  it('should mark form as invalid if required fields are missing', () => {
    component.signupForm.setValue({
      fullName: '', address: '', email: '', contactNumber: '', pan: '', password: ''
    });
    expect(component.signupForm.invalid).toBeTrue();
  });

  it('should not submit if form is invalid', () => {
    spyOn(component, 'onSubmit').and.callThrough();
    component.signupForm.setValue({
      fullName: '', address: '', email: '', contactNumber: '', pan: '', password: ''
    });
    component.onSubmit();
    expect(component.onSubmit).toHaveBeenCalled();
    expect(authSpy.signup).not.toHaveBeenCalled();
  });

  it('should call auth.signup and navigate to login on valid submit', fakeAsync(() => {
    spyOn(component.close, 'emit');
    component.signupForm.setValue({
      fullName: 'Test User',
      address: '123 Main St',
      email: 'test@example.com',
      contactNumber: '1234567890',
      pan: 'ABCDE1234F',
      password: '12345'
    });
    authSpy.signup.and.returnValue(of({}));
    component.onSubmit();
    tick();
    expect(authSpy.signup).toHaveBeenCalledWith(component.signupForm.value);
    expect(component.close.emit).toHaveBeenCalled();
    expect(routerSpy.navigate).toHaveBeenCalledWith(['/login']);
  }));

  it('should navigate to login on onLogin', () => {
    const event = new Event('click');
    spyOn(event, 'preventDefault');
    component.onLogin(event);
    expect(event.preventDefault).toHaveBeenCalled();
    expect(routerSpy.navigate).toHaveBeenCalledWith(['/login']);
  });

  it('should navigate to home on onCancel', () => {
    component.onCancel();
    expect(routerSpy.navigate).toHaveBeenCalledWith(['']);
  });
});
